# Default values for lambda-rpc.
# ref: https://github.com/Edouard127/lambda-rpc

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: edouard127/lambda-rpc
  pullPolicy: IfNotPresent
  tag: latest

# Kubernetes pod annotations
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# Kubernetes pod labels
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  
  # Additional service specs to be defined
  # Fields set here will be added to the end of the Service spec
  # Can include any fields from https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec
  extraServiceSpec: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true # Ingress is enabled by default
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  #  secretName: chart-example-tls

resources:
  limits:
   cpu: 100m
   memory: 128Mi
  requests:
   cpu: 100m
   memory: 128Mi

livenessProbe:
  httpGet:
    path: /live
    port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
    
readinessProbe:
  httpGet:
    path: /ready
    port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

#This section is for setting up atoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true # Autoscaling is enabled by default
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

lambdaRpc:
  # Additional rpc container environment variables
  # Values can be either variable values or `valueFrom` yaml
  extraEnv:
    environment: "release" # Options are: "release", "debug" and "test"

    verbosity: "INFO" # Options are: "DEBUG", "INFO", "WARN" and "ERROR"
    prettyJson: false # Pretty return JSON

    allowInsecure: false # Allow insecure minecraft accounts to connect

    rateLimit: 5 # Maximum number of requests allowed in the duration
    rateDuration: 10000 # Time frame in milliseconds in which requests can be made until n is reached
    rateBurst: 5 # How many requests can be handled simultaneously from one IP

nodeSelector: {}

tolerations: []

affinity: {}
